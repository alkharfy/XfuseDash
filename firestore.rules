/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows controlled access to client and system log data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Access is restricted to the user themselves.
 * - /clients/{clientId}: Stores client information. Read access is public, but write access is restricted to authorized users (TODO).
 * - /notifications/{notificationId}: Stores user-specific notifications. Access is restricted to the user and admin (TODO).
 * - /systemLogs/{logId}: Stores system log entries. Access is restricted to authorized users or processes (TODO).
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.  Listing all users is disallowed.
 * - Read access to clients is public to facilitate application functionality (TODO secure writes later).
 * - Notifications and system logs are currently placeholders with open read access and restricted write access (TODO secure writes later).
 *
 * Denormalization for Authorization:
 *  - The security rules rely on `request.auth.uid` for identity verification.
 *  - For the `/users/{userId}` collection, the `userId` in the path is matched against the `request.auth.uid` to ensure ownership.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` collection, ensuring it's not mixed with public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @deny (get) User with ID 'user123' cannot read the profile of 'user456'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId) && request.resource.data.id == userId;
        allow update: if isOwner(userId) && resource.data.id == userId;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to client data.  Read access is public, write access is restricted (TODO).
     * @path /clients/{clientId}
     * @allow (get) Any user can read a client's data.
     * @allow (list) Any user can list clients.
     * @deny (create) No one can create a client document without authorization.
     * @deny (update) No one can update a client document without authorization.
     * @principle Allows public read access, but requires owner-only writes (TODO).
     */
    match /clients/{clientId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add owner validation once roles are properly defined.
        allow update: if false && resource != null; // TODO: Add owner validation once roles are properly defined.
        allow delete: if false && resource != null; // TODO: Add owner validation once roles are properly defined.
    }

    /**
     * @description Controls access to notifications. Read access is public, write access is restricted (TODO).
     * @path /notifications/{notificationId}
     * @allow (get) Any user can read a notification.
     * @allow (list) Any user can list notifications.
     * @deny (create) No one can create a notification document without authorization.
     * @deny (update) No one can update a notification document without authorization.
     * @principle Allows public read access, but requires owner-only writes (TODO).
     */
    match /notifications/{notificationId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add owner validation once roles are properly defined.
        allow update: if false && resource != null; // TODO: Add owner validation once roles are properly defined.
        allow delete: if false && resource != null; // TODO: Add owner validation once roles are properly defined.
    }

    /**
     * @description Controls access to system logs.  Read access is public, write access is restricted (TODO).
     * @path /systemLogs/{logId}
     * @allow (get) Any user can read a system log.
     * @allow (list) Any user can list system logs.
     * @deny (create) No one can create a system log document without authorization.
     * @deny (update) No one can update a system log document without authorization.
     * @principle Allows public read access, but requires owner-only writes (TODO).
     */
    match /systemLogs/{logId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add owner validation once roles are properly defined.
        allow update: if false && resource != null; // TODO: Add owner validation once roles are properly defined.
        allow delete: if false && resource != null; // TODO: Add owner validation once roles are properly defined.
    }
  }
}