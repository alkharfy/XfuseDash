/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model and role-based access control for a marketing team dashboard.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, including roles.
 * - /clients/{clientId}: Stores client data, with `registeredBy` and `assignedToPR` fields denormalized for authorization.
 * - /notifications/{notificationId}: Stores notifications for users.
 * - /systemLogs/{logId}: Stores system logs for auditing.
 *
 * Key Security Decisions:
 * - Users can only list other users (this was the error reported in NextJS), deny this operation.
 * - Ownership is enforced for user profiles and notifications.
 * - The `clients` collection leverages denormalized fields (`registeredBy`, `assignedToPR`) for authorization.
 * - System logs are generally restricted, as the rule assumes they hold sensitive data.
 *
 * Denormalization for Authorization:
 * - The `clients` documents store the `registeredBy` (userId) and `assignedToPR` (userId) to avoid needing to read the `/users/{userId}` document for simple authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is signed in.
     * @return {bool} - True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Allow user to create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Allow the owner to read, update, and delete their own profile.
     * @deny (list) - Listing users is forbidden.
     * @deny (create) - Allow create operation with mismatched userId.
     * @principle Enforces document ownership for writes, restricts listing of users, and validates data consistency.
     */
    match /users/{userId} {
      //Read Rules
      allow get: if isOwner(userId);
      allow list: if false;

      //Write Rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for clients.
     * @path /clients/{clientId}
     * @allow (get, list) - Allow public read access to clients.
     * @allow (create) - Allow creation only if the 'registeredBy' field matches the user's UID.
     * @allow (update, delete) - Allow update and delete only if the user is the 'registeredBy'.
     * @deny (create) - Deny create operation where 'registeredBy' does not match user's UID.
     * @principle Public read access with owner-only writes, enforces ownership on create, update, and delete.
     */
    match /clients/{clientId} {
      //Read Rules
      allow get, list: if true;

      //Write Rules
      allow create: if isSignedIn() && request.resource.data.registeredBy == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.registeredBy == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.registeredBy == request.auth.uid;
    }

    /**
     * @description Rules for notifications.
     * @path /notifications/{notificationId}
     * @allow (create) - Allow a user to create their own notification if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Allow the owner to read, list, update, and delete their own notifications.
     * @deny (create) - Deny create operation where the notification's `userId` does not match the authenticated user's UID.
     * @principle Enforces document ownership, restricts access to a user's own data tree, and validates data consistency.
     */
    match /notifications/{notificationId} {
      //Read Rules
      allow get, list: if isSignedIn();

      //Write Rules
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for system logs.
     * @path /systemLogs/{logId}
     * @allow (get) - Allow public read access to system logs (for debugging - PROTOTYPING ONLY).
     * @deny (list, create, update, delete) - Deny all listing, creation, updates, and deletion of system logs.
     * @principle Restricts all access to system logs (except get), assuming they contain sensitive data.
     */
    match /systemLogs/{logId} {
      //Read Rules
      allow get: if true; // PROTOTYPING ONLY.  In production, restrict this further.
      allow list: if false;

      //Write Rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}