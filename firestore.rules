/**
 * @file Firebase Security Rules for Marketing Team Dashboard
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user-specific data (e.g., notifications) and role-based access control for other collections (e.g., clients, system logs). It prioritizes security and data integrity through explicit authorization checks and data validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the 'role' field used for access control.
 * - /clients/{clientId}: Stores client data, with 'registeredBy' and 'assignedToPR' fields denormalized for authorization.
 * - /notifications/{notificationId}: Stores notifications for users.
 * - /systemLogs/{logId}: Stores system logs for auditing.
 *
 * Key Security Decisions:
 * - Users can only update their own profiles.
 * - Client creation is restricted to authenticated users.
 * - Notifications are user-specific and only accessible by the owning user.
 * - Role-based access control is enforced for creating, updating, and deleting clients.
 * - System logs are write-only for backend services.
 *
 * Denormalization for Authorization:
 * - Clients include 'registeredBy' and 'assignedToPR' fields, storing the user IDs of the registering moderator and assigned PR representative, respectively. This enables direct authorization checks without needing to fetch user roles from the /users collection.
 *
 * Structural Segregation:
 * - User profiles, clients, notifications, and system logs are stored in separate top-level collections, simplifying security rules and ensuring a clear security posture for each data type.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can only read and update their own profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if the request is made by the user with matching {userId}.
     * @allow (create) if the user's auth UID matches the {userId}.
     * @deny (get, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Users should not be able to list all user profiles.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability of user ID.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to clients. Authenticated users can create clients.
     * @path /clients/{clientId}
     * @allow (create) if the request is made by an authenticated user. The 'registeredBy' field must match the user's UID.
     * @allow (get, list) if true.
     * @allow (update, delete) if false.
     * @deny (create) if the 'registeredBy' field does not match the user's UID.
     * @principle Allows public read access to clients but enforces ownership for writes.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.registeredBy == request.auth.uid;
      allow update, delete: if false; // TODO: Add role-based access control once roles are defined.
    }

    /**
     * @description Controls access to notifications. Only the user who owns the notification can read or modify it.
     * @path /notifications/{notificationId}
     * @allow (get, list) if the request is made by the user with matching {userId}.
     * @allow (create, update, delete) if false.
     * @deny (get, list) if the request is made by a different user.
     * @principle Enforces document ownership for notifications.
     */
    match /notifications/{notificationId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn(); // TODO: add role validation once roles are defined

      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to system logs. Only backend services can write to system logs. No one can read.
     * @path /systemLogs/{logId}
     * @allow (create) if the request is made by a service account (TODO: Implement service account check).
     * @deny (get, list, update, delete) All users can't read/update logs.
     */
    match /systemLogs/{logId} {
      allow get, list, update, delete: if false;
      allow create: if false; // TODO: Implement service account check
    }
  }
}