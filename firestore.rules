/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and employs role-based access control for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only to the user themselves.
 * - /clients/{clientId}: Stores client data. Access is controlled based on user roles and ownership (`registeredBy`, `assignedToPR`).
 * - /notifications/{notificationId}: Stores notifications for users. Each notification is stored under the user's ID.
 * - /systemLogs/{logId}: Stores system logs. Access is denied to all users.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user documents.
 * - Listing of users is strictly forbidden.
 * - Clients can be managed by moderators or PR staff, as indicated by the `registeredBy` and `assignedToPR` fields.
 * - Notifications are private to the user.
 * - System logs are not accessible to any user.
 *
 * Denormalization for Authorization:
 * - The `clients` collection denormalizes `registeredBy` and `assignedToPR` to avoid requiring `get()` operations on the `users` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own document.
     *   auth: { uid: 'user123' }
     *   request.resource.data: { id: 'user123', ... }
     * @allow (get) User with ID 'user123' can read their own document.
     *   auth: { uid: 'user123' }
     * @allow (update) User with ID 'user123' can update their own document.
     *   auth: { uid: 'user123' }
     * @allow (delete) User with ID 'user123' can delete their own document.
     *   auth: { uid: 'user123' }
     * @deny (create) User with ID 'user123' cannot create a document with ID 'otherUser'.
     *   auth: { uid: 'user123' }
     *   request.resource.data: { id: 'otherUser', ... }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /clients/{clientId} documents.
     * @path /clients/{clientId}
     * @allow (get) Any authenticated user can read client documents.
     *   auth: { uid: 'user123' }
     * @allow (list) Any authenticated user can list client documents.
     *   auth: { uid: 'user123' }
     * @allow (create) User with ID 'user123' can create a client document if they are the registering user.
     *   auth: { uid: 'user123' }
     *   request.resource.data: { registeredBy: 'user123', ... }
     * @allow (update) User with ID 'user123' can update a client document if they are the registering user.
     *   auth: { uid: 'user123' }
     *   resource.data: { registeredBy: 'user123', ... }
     * @allow (delete) User with ID 'user123' can delete a client document if they are the registering user.
     *   auth: { uid: 'user123' }
     *   resource.data: { registeredBy: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create a client document if they are not the registering user.
     *   auth: { uid: 'user123' }
     *   request.resource.data: { registeredBy: 'otherUser', ... }
     * @principle Controls client access based on user role and ownership (registeredBy).
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.registeredBy == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.registeredBy == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.registeredBy == request.auth.uid;
    }

    /**
     * @description Rule for /notifications/{notificationId} documents.
     * @path /notifications/{notificationId}
     * @allow (create) Not applicable since notifications should be under /users/{userId}/notifications/{notificationId}
     * @allow (get) Not applicable since notifications should be under /users/{userId}/notifications/{notificationId}
     * @allow (list) Not applicable since notifications should be under /users/{userId}/notifications/{notificationId}
     * @allow (update) Not applicable since notifications should be under /users/{userId}/notifications/{notificationId}
     * @allow (delete) Not applicable since notifications should be under /users/{userId}/notifications/{notificationId}
     * @principle Restricts access to a user's own data tree.
     */
    match /notifications/{notificationId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Rule for /systemLogs/{logId} documents.
     * @path /systemLogs/{logId}
     * @allow None. System logs are not accessible to users.
     * @principle Denies all access to system logs.
     */
    match /systemLogs/{logId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Rule for /users/{userId}/notifications/{notificationId} documents.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get) User with ID 'user123' can read their own notification.
     *   auth: { uid: 'user123' }
     * @allow (list) User with ID 'user123' can list their own notifications.
     *   auth: { uid: 'user123' }
     * @allow (create) User with ID 'user123' can create a notification under their ID.
     *   auth: { uid: 'user123' }
     *   request.resource.data: { userId: 'user123', ... }
     * @allow (update) User with ID 'user123' can update their own notification.
     *   auth: { uid: 'user123' }
     *   resource.data: { userId: 'user123', ... }
     * @allow (delete) User with ID 'user123' can delete their own notification.
     *   auth: { uid: 'user123' }
     *   resource.data: { userId: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create a notification under another user's ID.
     *   auth: { uid: 'user123' }
     *   request.resource.data: { userId: 'otherUser', ... }
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}