/**
 * @fileOverview Firestore Security Rules for the marketing team dashboard.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and notifications,
 * and restricts client and system log access based on user roles and ownership.
 * Data shape validation is relaxed to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  User documents are secured using ownership.
 * - /clients/{clientId}: Stores client data. Access is restricted based on the 'registeredBy' and 'assignedToPR' fields.
 * - /notifications/{notificationId}: Stores notifications. Notification access is restricted to the owning user.
 * - /systemLogs/{logId}: Stores system logs.  Access is generally restricted.
 *
 * Key Security Decisions:
 * - Listing of all users is disallowed to prevent information disclosure.
 * - Clients are secured using the `registeredBy` and `assignedToPR` fields to reflect the user who registered the client and the user assigned to PR for that client, respectively.
 * - Strict ownership is enforced for notifications.
 *
 * Denormalization for Authorization:
 * - The `Client` entity contains the `registeredBy` and `assignedToPR` fields,
 *   which store the User IDs of the registering user and the assigned PR user.
 *   This allows client access to be checked directly without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can only access/modify their own profile.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Non-authenticated users cannot create user profiles.
     * @deny (update, delete) Users cannot modify or delete other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rule for client documents.
     * @path /clients/{clientId}
     * @allow (get, list) Any authenticated user can view clients.
     * @allow (create) Only an authenticated user can create a client, with registeredBy set to their UID.
     * @allow (update, delete) Only the registering user can update or delete the client.
     * @deny (create) Creating a client with an invalid registeredBy value is denied.
     * @deny (update, delete) Non-owners cannot update or delete clients.
     * @principle Enforces ownership via the 'registeredBy' field for writes.  Allows public reads.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRegisteringUser() {
        return request.auth.uid == request.resource.data.registeredBy;
      }

      function isExistingRegisteringUser() {
        return request.auth.uid == resource.data.registeredBy;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isRegisteringUser();
      allow update: if isSignedIn() && isExistingRegisteringUser();
      allow delete: if isSignedIn() && isExistingRegisteringUser();
    }

    /**
     * @description Rule for notification documents under a specific user.
     * @path /notifications/{notificationId}
     * @allow (create) Authenticated user can create notifications for themselves.
     * @allow (get, list, update, delete) Authenticated user can only access/modify their own notifications.
     * @deny (create, update, delete) Users cannot modify or delete other user's notifications.
     * @principle Enforces document ownership for notifications.
     */
    match /notifications/{notificationId} {
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      function isCreatingOwner() {
        return request.auth.uid == request.resource.data.userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner();
      allow list: if isSignedIn() && isOwner();
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Rule for system log documents.
     * @path /systemLogs/{logId}
     * @allow (get) Any authenticated user can read logs.
     * @deny (create, update, delete, list) No one can create, update, delete or list logs through the client.
     * @principle Restricts write access to system logs.
     */
    match /systemLogs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}