/**
 * @file Firebase Security Rules for the Marketing Team Dashboard
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data (e.g., notifications) and employs role-based access control for other collections. It prioritizes secure access to user data and restricts unauthorized modifications. Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'role' used for authorization.
 * - /clients/{clientId}: Stores client data, with 'registeredBy' and 'assignedToPR' for authorization independence.
 * - /notifications/{notificationId}: Stores notifications, accessible only to the owning user.
 * - /systemLogs/{logId}: Stores system logs, writeable by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data access.
 * - Read-only collections (if any) are explicitly marked as such.
 * - The rules assume a strict ownership model by default unless explicitly overridden.
 *
 * Denormalization for Authorization:
 * - The `clients` collection stores the `registeredBy` and `assignedToPR` fields to enable security rules to validate the user's role and the client's ownership without needing to perform a `get()` operation to retrieve the user's role from the `/users` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in and the document exists.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Enforces user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isSignedIn();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages client data, enabling authorized users to manage client entries.
     * @path /clients/{clientId}
     * @allow (create) Authenticated user can create a client.
     * @deny (update) Unauthorized user cannot update a client.
     * @principle Uses denormalized fields for authorization independence.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures notifications to be accessible only by the owning user.
     * @path /notifications/{notificationId}
     * @allow (get) User 'user123' can get their notification if authenticated as 'user123'.
     * @deny (update) User 'user456' cannot update a notification belonging to 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /notifications/{notificationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to manage system logs.
     * @path /systemLogs/{logId}
     * @allow (create) Authenticated user can create a system log.
     * @deny (delete) Unauthorized user cannot delete a system log.
     * @principle Log entries are writeable by all signed-in users.
     */
    match /systemLogs/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}