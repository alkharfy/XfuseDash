/**
 * @file Firebase Security Rules for the Marketing Team Dashboard.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (e.g., notifications).
 * Access to client data is controlled via denormalized fields such as `registeredBy` and `assignedToPR`.
 * Listing of the /users collection is explicitly denied.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, including roles.
 * - /clients/{clientId}: Stores client information, including denormalized fields for access control.
 * - /notifications/{notificationId}: Stores notifications, accessible only by the owning user.
 * - /systemLogs/{logId}: Stores system logs.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy and prevent enumeration attacks.
 * - Roles are stored directly on the user document to simplify access control.
 * - Denormalization is used extensively to avoid costly `get()` operations in security rules.
 * - Strict ownership is enforced for notifications, ensuring users can only access their own notifications.
 *
 * Denormalization for Authorization:
 * - The `clients` collection stores `registeredBy` (the user ID of the moderator who created the client) and `assignedToPR` for authorization. This avoids having to query the `users` collection to determine the user's role or relationship to the client.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Denies write requests.
     */
    function denyAllWrites() {
      return false;
    }

    /**
     * @description
     * Rules for the /users/{userId} collection.
     * This collection stores user profiles.
     * Only the authenticated user themselves can read or write their own profile.
     *
     * @path /users/{userId}
     * @allow (create) If the user is authenticated and the userId in the path matches their auth.uid.
     * @deny (create) If the user is not authenticated or the userId in the path does not match their auth.uid.
     * @allow (get, update, delete) If the user is authenticated and the userId in the path matches their auth.uid.
     * @deny (get, update, delete) If the user is not authenticated or the userId in the path does not match their auth.uid.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user listing
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for the /clients/{clientId} collection.
     * This collection stores client data.
     * Authenticated users can read client data.
     * Client creation is allowed.
     * Updates and deletes are allowed.
     *
     * @path /clients/{clientId}
     * @allow (get, list) If true (public read).
     * @allow (create) If the user is authenticated.
     * @deny (create) If the user is not authenticated.
     * @allow (update, delete) If the user is authenticated.
     * @deny (update, delete) If the user is not authenticated.
     * @principle Public read with owner-only writes, enforced via the registeredBy field.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description
     * Rules for the /notifications/{notificationId} collection.
     * This collection stores notification data, related to some client.
     * Only the user associated with the userId can read/write their notifications.
     *
     * @path /notifications/{notificationId}
     * @allow (get, list, create, update, delete) If the userId in the path matches the authenticated user's ID.
     * @deny (get, list, create, update, delete) If the userId in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for reads and writes of notifications.
     */
    match /notifications/{notificationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description
     * Rules for the /systemLogs/{logId} collection.
     * This collection stores system logs.
     * No write operations are allowed.
     *
     *
     * @path /systemLogs/{logId}
     * @allow (get, list) If true (public read).
     * @deny (create, update, delete) Always. System logs should not be created, updated, or deleted directly by clients.
     * @principle Read-only access to system logs for auditing purposes.
     */
    match /systemLogs/{logId} {
      allow get, list: if true;
      allow create, update, delete: if denyAllWrites();
    }
  }
}