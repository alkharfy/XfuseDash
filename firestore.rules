/**
 * @fileoverview Firestore Security Rules for the marketing team dashboard.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user-specific data
 * and allows public read access for clients, with owner-only writes.
 * Administrative functions are not yet implemented.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only access their own profile.
 * - /clients/{clientId}: Stores client data. Publicly readable, but only the owner can modify.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Data validation is limited to ownership and relational integrity checks
 *   to enable rapid prototyping and flexible data shapes.
 * - Denormalization: None implemented yet, but consider adding ownerId to /clients/{clientId}
 *   to avoid collection queries in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents unauthenticated access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID, allow creation.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID, deny creation.
     * @allow (get, list) If the user ID in the path matches the authenticated user's ID, allow read.
     * @deny (get, list) If the user ID in the path does not match the authenticated user's ID, deny read.
     * @allow (update, delete) If the user ID in the path matches the authenticated user's ID, allow update and delete.
     * @deny (update, delete) If the user ID in the path does not match the authenticated user's ID, deny update and delete.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /clients collection.
     * @path /clients/{clientId}
     * @allow (get, list) Allow public read access.
     * @allow (create) If the authenticated user ID matches the registeredBy field, allow creation.
     * @deny (create) If the authenticated user ID does not match the registeredBy field, deny creation.
     * @allow (update, delete) If the authenticated user ID matches the registeredBy field, allow update and delete.
     * @deny (update, delete) If the authenticated user ID does not match the registeredBy field, deny update and delete.
     * @principle Public read access with owner-only writes, enforced via the registeredBy field.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.registeredBy == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.registeredBy == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.registeredBy == request.auth.uid;
    }

    /**
     * @description Rules for the /notifications collection.
     * @path /notifications/{notificationId}
     * @allow (create) Allow if the notification's userId matches the authenticated user's ID.
     * @deny (create) Deny if the notification's userId does not match the authenticated user's ID.
     * @allow (get, list) Allow if the notification's userId matches the authenticated user's ID.
     * @deny (get, list) Deny if the notification's userId does not match the authenticated user's ID.
     * @allow (update, delete) Allow if the notification's userId matches the authenticated user's ID. Resource must also exist.
     * @deny (update, delete) Deny if the notification's userId does not match the authenticated user's ID.
     * @principle Enforces user-specific access to notifications.
     */
    match /notifications/{notificationId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the /systemLogs collection.
     * @path /systemLogs/{logId}
     * @allow (create) Deny all creates
     * @allow (get, list) Deny all gets and lists.
     * @allow (update, delete) Deny all updates and deletes.
     */
    match /systemLogs/{logId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}