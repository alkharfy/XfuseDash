/**
 * @description This ruleset enforces a user-ownership model for users and a role-based access control for clients,
 * notifications, and system logs.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the user themselves.
 * - /clients/{clientId}: Stores client information. Access is unrestricted to facilitate client data sharing with team members.
 * - /notifications/{notificationId}: Stores user notifications.
 * - /systemLogs/{logId}: Stores system logs.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Listing of users is disallowed.
 * - Read and write operations on `/clients/{clientId}` are public.
 * - Notifications and systemLogs can be created by any signed-in user.
 *
 * Denormalization for Authorization: N/A (User ID is available in the path for /users/{userId}).
 * Structural Segregation: N/A.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching user ID.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (get) - Authenticated user reads their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a different user ID.
     * @deny (update) - Authenticated user attempts to update another user's profile.
     * @deny (delete) - No one can delete a user document, only Firebase Auth can.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Allows public read and write access to client documents.
     * @path /clients/{clientId}
     * @allow (get, list) - Any user can read client data.
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete client data.
     * @deny (none) - No restrictions on read/write operations.
     * @principle Allows public access to client data for collaborative editing and viewing.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to create notifications.
     * @path /notifications/{notificationId}
     * @allow (create) - Any authenticated user can create a notification.
     * @deny (get, list, update, delete) - Only the system can manage notifications.
     * @principle Notifications can be created by any user, but not read, updated, or deleted.
     */
    match /notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows any signed-in user to create system logs.
     * @path /systemLogs/{logId}
     * @allow (create) - Any authenticated user can create a system log.
     * @deny (get, list, update, delete) - Only the system can manage system logs.
     * @principle System logs can be created by any user, but not read, updated, or deleted.
     */
    match /systemLogs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}